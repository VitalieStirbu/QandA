{"version":3,"sources":["AskPage.tsx"],"names":["connect","store","postedQuestionResult","questions","postedResult","dispatch","postQuestion","question","postQuestionActionCreator","clearPostedQuestion","clearPostedQuestionActionCreator","useEffect","submitResult","success","undefined","title","submitCaption","validationRules","validator","required","minLength","arg","content","onSubmit","values","userName","created","Date","failureMessage","successMessage","name","label","type"],"mappings":"qGAAA,mEA6EeA,uBAZS,SAACC,GACvB,MAAO,CACLC,qBAAsBD,EAAME,UAAUC,iBAGf,SAACC,GAC1B,MAAO,CACLC,aAAc,SAACC,GAAD,OACZF,EAASG,YAA0BD,KACrCE,oBAAqB,kBAAMJ,EAASK,mBAGzBV,EAzDY,SAAC,GAIrB,IAHLM,EAGI,EAHJA,aACAJ,EAEI,EAFJA,qBACAO,EACI,EADJA,oBAEAE,qBAAU,WACR,OAAO,WACLF,OAED,CAACA,IAEJ,IASIG,EAKJ,OAJIV,IACFU,EAAe,CAAEC,aAAkCC,IAAzBZ,IAI1B,kBAAC,IAAD,CAAMa,MAAM,kBACV,kBAAC,IAAD,CACEC,cAAc,uBACdJ,aAAcA,EACdK,gBAAiB,CACfF,MAAO,CAAC,CAAEG,UAAWC,KAAY,CAAED,UAAWE,IAAWC,IAAK,KAC9DC,QAAS,CAAC,CAAEJ,UAAWC,KAAY,CAAED,UAAWE,IAAWC,IAAK,MAElEE,SAvBe,SAACC,GACpBlB,EAAa,CACXS,MAAOS,EAAOT,MACdO,QAASE,EAAOF,QAChBG,SAAU,OACVC,QAAS,IAAIC,QAmBXC,eAAe,yCACfC,eAAe,4CAEf,kBAAC,IAAD,CAAOC,KAAK,QAAQC,MAAM,UAC1B,kBAAC,IAAD,CAAOD,KAAK,UAAUC,MAAM,UAAUC,KAAK","file":"static/js/3.01125e82.chunk.js","sourcesContent":["import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport {\r\n  postQuestionActionCreator,\r\n  AppState,\r\n  clearPostedQuestionActionCreator,\r\n} from './Store';\r\nimport { AnyAction } from 'redux';\r\nimport { Page } from './Page';\r\nimport { Form, required, minLength, Values, SubmitResult } from './Form';\r\nimport { PostQuestionData, QuestionData } from './QuestionsData';\r\nimport { Field } from './Field';\r\n\r\ninterface Props {\r\n  postQuestion: (question: PostQuestionData) => Promise<void>;\r\n  postedQuestionResult?: QuestionData;\r\n  clearPostedQuestion: () => void;\r\n}\r\n\r\nconst AskPage: FC<Props> = ({\r\n  postQuestion,\r\n  postedQuestionResult,\r\n  clearPostedQuestion,\r\n}) => {\r\n  useEffect(() => {\r\n    return function cleanUp() {\r\n      clearPostedQuestion();\r\n    };\r\n  }, [clearPostedQuestion]);\r\n\r\n  const handleSubmit = (values: Values) => {\r\n    postQuestion({\r\n      title: values.title,\r\n      content: values.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n  };\r\n\r\n  let submitResult: SubmitResult | undefined;\r\n  if (postedQuestionResult) {\r\n    submitResult = { success: postedQuestionResult !== undefined };\r\n  }\r\n\r\n  return (\r\n    <Page title=\"Ask a Question\">\r\n      <Form\r\n        submitCaption=\"Submit Your Question\"\r\n        submitResult={submitResult}\r\n        validationRules={{\r\n          title: [{ validator: required }, { validator: minLength, arg: 10 }],\r\n          content: [{ validator: required }, { validator: minLength, arg: 50 }],\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        failureMessage=\"There was a problem with your question\"\r\n        successMessage=\"Your question was successfully submitted\"\r\n      >\r\n        <Field name=\"title\" label=\"Title\" />\r\n        <Field name=\"content\" label=\"Content\" type=\"TextArea\" />\r\n      </Form>\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n  return {\r\n    postedQuestionResult: store.questions.postedResult,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\r\n  return {\r\n    postQuestion: (question: PostQuestionData) =>\r\n      dispatch(postQuestionActionCreator(question)),\r\n    clearPostedQuestion: () => dispatch(clearPostedQuestionActionCreator()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AskPage);\r\n"],"sourceRoot":""}