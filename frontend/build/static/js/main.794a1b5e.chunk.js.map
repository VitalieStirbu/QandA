{"version":3,"sources":["Auth.tsx","Page.tsx","http.ts","QuestionsData.ts","Form.tsx","AppSettings.ts","Store.ts","Styles.ts","Field.tsx","user.svg","Question.tsx","QuestionList.tsx","SearchPage.tsx","SignInPage.tsx","NotFoundPage.tsx","Answer.tsx","AnswerList.tsx","QuestionPage.tsx","SignOutPage.tsx","AuthorizedPage.tsx","Icons.tsx","Header.tsx","HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Auth0Context","createContext","isAuthenticated","signIn","signOut","loading","useAuth","useContext","getAccessToken","a","createAuth0Client","authSettings","auth0FromHook","getTokenSilently","accessToken","AuthProvider","children","useState","setIsAuthenticated","undefined","user","setUser","auth0Client","setAuth0Client","setLoading","getAuth0ClientFromState","Error","useEffect","window","location","pathname","search","indexOf","handleRedirectCallback","replace","origin","isAuthenticatedFromHook","getUser","initAuth0","Provider","value","loginWithRedirect","logout","client_id","returnTo","Page","title","css","http","config","Promise","resolve","reject","response","request","Request","webAPIUrl","path","method","headers","body","JSON","stringify","set","fetch","then","res","get","json","ok","parsedBody","catch","err","console","error","mapQuestionFromServer","question","created","Date","substr","answers","map","answer","getUnansweredQuestions","result","getQuestion","questionId","searchQuestions","criteria","postQuestion","postAnswer","FormContext","values","errors","touched","required","minLength","length","Form","submitCaption","validationRules","onSubmit","submitResult","successMessage","failureMessage","setValues","setErrors","setTouched","submitting","setSubmitting","submitted","setSubmitted","submitError","setSubmitError","validate","fieldName","rules","Array","isArray","fieldErrors","forEach","rule","validator","arg","push","newErrors","handleSubmit","e","preventDefault","validateForm","success","haveError","Object","keys","disabled","showError","showSuccess","setValue","noValidate","gray6","gray5","type","domain","redirect_uri","scope","audience","initialQuestionState","unanswered","getUnansweredQuestionsActionCreator","dispatch","questions","postQuestionActionCreator","clearPostedQuestionActionCreator","neverReached","never","rootReducer","combineReducers","state","action","concat","postedResult","configureStore","createStore","applyMiddleware","thunk","gray1","gray2","gray3","accent2","fontFamily","fontSize","PrimaryButton","styled","button","PageTitle","h2","StatusText","div","baseCSS","Field","name","label","handleChange","currentTarget","handleBlur","Consumer","htmlFor","toLowerCase","id","onChange","onBlur","module","exports","Question","data","showContent","to","content","substring","userName","toLocaleDateString","toLocaleTimeString","QuestionList","renderItem","key","SearchPage","setQuestions","URLSearchParams","foundResults","doSearch","SignInPage","NotFoundPage","Answer","AnswerList","answerId","QuestionPage","match","setQuestion","setUpSignalRConnection","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","on","message","log","start","HubConnectionState","Connected","invoke","toString","cleanUpSignalRConnection","off","stop","doGetQuestion","foundQuestion","params","Number","con","SignOutPage","AuthorizedPage","UserIcon","src","alt","buttonStyle","HeaderWithRouter","withRouter","history","setSearch","process","placeholder","local","connect","store","questionsLoading","onClick","AskPage","lazy","App","Auth","from","exact","component","HomePage","fallback","render","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.794a1b5e.chunk.js","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  createContext,\r\n  FC,\r\n} from 'react';\r\nimport createAuth0Client from '@auth0/auth0-spa-js';\r\nimport Auth0Client from '@auth0/auth0-spa-js/dist/typings/Auth0Client';\r\nimport { authSettings } from './AppSettings';\r\n\r\ninterface Auth0User {\r\n  name: string;\r\n  email: string;\r\n}\r\ninterface IAuth0Context {\r\n  isAuthenticated: boolean;\r\n  user?: Auth0User;\r\n  signIn: () => void;\r\n  signOut: () => void;\r\n  loading: boolean;\r\n}\r\nexport const Auth0Context = createContext<IAuth0Context>({\r\n  isAuthenticated: false,\r\n  signIn: () => {},\r\n  signOut: () => {},\r\n  loading: true,\r\n});\r\n\r\nexport const useAuth = () => useContext(Auth0Context);\r\n\r\nexport const getAccessToken = async () => {\r\n  const auth0FromHook = await createAuth0Client(authSettings);\r\n  const accessToken = await auth0FromHook.getTokenSilently();\r\n  return accessToken;\r\n};\r\n\r\nexport const AuthProvider: FC = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [user, setUser] = useState<Auth0User | undefined>(undefined);\r\n  const [auth0Client, setAuth0Client] = useState<Auth0Client>();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const getAuth0ClientFromState = () => {\r\n    if (auth0Client === undefined) {\r\n      throw new Error('Auth0 client not set');\r\n    }\r\n    return auth0Client;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      setLoading(true);\r\n      const auth0FromHook = await createAuth0Client(authSettings);\r\n      setAuth0Client(auth0FromHook);\r\n\r\n      if (\r\n        window.location.pathname === '/signin-callback' &&\r\n        window.location.search.indexOf('code=') > -1\r\n      ) {\r\n        await auth0FromHook.handleRedirectCallback();\r\n        window.location.replace(window.location.origin);\r\n      }\r\n\r\n      const isAuthenticatedFromHook = await auth0FromHook.isAuthenticated();\r\n      if (isAuthenticatedFromHook) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n      setIsAuthenticated(isAuthenticatedFromHook);\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n  }, []);\r\n\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        signIn: () => getAuth0ClientFromState().loginWithRedirect(),\r\n        signOut: () =>\r\n          getAuth0ClientFromState().logout({\r\n            client_id: authSettings.client_id,\r\n            returnTo: window.location.origin + '/signout-callback',\r\n          }),\r\n        loading,\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC } from 'react';\r\nimport { PageTitle } from './Styles';\r\n\r\ninterface Props {\r\n  title?: string;\r\n}\r\n\r\nexport const Page: FC<Props> = ({ title, children }) => (\r\n  <div\r\n    css={css`\r\n      margin: 50px auto 20px auto;\r\n      padding: 30px 20px;\r\n      max-width: 600px;\r\n    `}\r\n  >\r\n    {title && <PageTitle>{title}</PageTitle>}\r\n    {children}\r\n  </div>\r\n);\r\n","import { webAPIUrl } from './AppSettings';\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n  method?: string;\r\n  body?: REQB;\r\n  accessToken?: string;\r\n}\r\nexport interface HttpResponse<RESB> extends Response {\r\n  parsedBody?: RESB;\r\n}\r\n\r\nexport const http = <REQB, RESB>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = new Request(`${webAPIUrl}${config.path}`, {\r\n      method: config.method || 'get',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: config.body ? JSON.stringify(config.body) : undefined,\r\n    });\r\n\r\n    if (config.accessToken) {\r\n      request.headers.set('authorization', `bearer ${config.accessToken}`);\r\n    }\r\n\r\n    let response: HttpResponse<RESB>;\r\n    fetch(request)\r\n      .then(res => {\r\n        response = res;\r\n        if (res.headers.get('Content-Type') || ''.indexOf('json') > 0) {\r\n          return res.json();\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      })\r\n      .then(body => {\r\n        if (response.ok) {\r\n          response.parsedBody = body;\r\n          resolve(response);\r\n        } else {\r\n          reject(response);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        reject(err);\r\n      });\r\n    // TODO - make the HTTP request\r\n    // TODO - resolve the promise with the parsed body if a successful request\r\n    // TODO - reject the promise if the request is unsuccessful\r\n  });\r\n};\r\n","import { http } from './http';\r\nimport { getAccessToken } from './Auth';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n  answers: AnswerDataFromServer[];\r\n}\r\nexport interface AnswerDataFromServer {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: string;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created.substr(0, 19)),\r\n  answers: question.answers.map(answer => ({\r\n    ...answer,\r\n    created: new Date(answer.created.substr(0, 19)),\r\n  })),\r\n});\r\n\r\nconst questions: QuestionData[] = [\r\n  {\r\n    questionId: 1,\r\n    title: 'Why should I learn TypeScript?',\r\n    content:\r\n      'TypeScript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [\r\n      {\r\n        answerId: 1,\r\n        content: 'To catch problems earlier speeding up your developments',\r\n        userName: 'Jane',\r\n        created: new Date(),\r\n      },\r\n      {\r\n        answerId: 2,\r\n        content:\r\n          'So, that you can use the JavaScript features of tomorrow, today',\r\n        userName: 'Fred',\r\n        created: new Date(),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    questionId: 2,\r\n    title: 'Which state management tool should I use?',\r\n    content:\r\n      'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n];\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  try {\r\n    const result = await http<undefined, QuestionDataFromServer[]>({\r\n      path: '/questions/unanswered',\r\n    });\r\n    if (result.parsedBody) {\r\n      return result.parsedBody.map(mapQuestionFromServer);\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst wait = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  try {\r\n    const result = await http<undefined, QuestionDataFromServer>({\r\n      path: `/questions/${questionId}`,\r\n    });\r\n    if (result.ok && result.parsedBody) {\r\n      return mapQuestionFromServer(result.parsedBody);\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  try {\r\n    const result = await http<undefined, QuestionDataFromServer[]>({\r\n      path: `/questions?search=${criteria}`,\r\n    });\r\n    if (result.ok && result.parsedBody) {\r\n      return result.parsedBody.map(mapQuestionFromServer);\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  const accessToken = await getAccessToken();\r\n  try {\r\n    const result = await http<PostQuestionData, QuestionDataFromServer>({\r\n      path: '/questions',\r\n      method: 'post',\r\n      body: question,\r\n      accessToken,\r\n    });\r\n    if (result.ok && result.parsedBody) {\r\n      return mapQuestionFromServer(result.parsedBody);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  const accessToken = await getAccessToken();\r\n  try {\r\n    const result = await http<PostAnswerData, AnswerData>({\r\n      path: '/questions/answer',\r\n      method: 'post',\r\n      body: answer,\r\n      accessToken,\r\n    });\r\n    if (result.ok) {\r\n      return result.parsedBody;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return undefined;\r\n  }\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC, useState, createContext, FormEvent } from 'react';\r\nimport { PrimaryButton, gray5, gray6 } from './Styles';\r\n\r\nexport interface Values {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Errors {\r\n  [key: string]: string[];\r\n}\r\n\r\nexport interface Touched {\r\n  [key: string]: boolean;\r\n}\r\n\r\ninterface FormContextProps {\r\n  values: Values;\r\n  setValue?: (fieldName: string, value: any) => void;\r\n  errors: Errors;\r\n  validate?: (fieldName: string) => void;\r\n  touched: Touched;\r\n  setTouched?: (fieldName: string) => void;\r\n}\r\n\r\ninterface Validation {\r\n  validator: Validator;\r\n  arg?: any;\r\n}\r\n\r\ninterface ValidationProp {\r\n  [key: string]: Validation | Validation[];\r\n}\r\n\r\nexport interface SubmitResult {\r\n  success: boolean;\r\n  errors?: Errors;\r\n}\r\n\r\ninterface Props {\r\n  submitCaption?: string;\r\n  validationRules?: ValidationProp;\r\n  onSubmit: (values: Values) => Promise<SubmitResult> | void;\r\n  submitResult?: SubmitResult;\r\n  successMessage?: string;\r\n  failureMessage?: string;\r\n}\r\n\r\nexport const FormContext = createContext<FormContextProps>({\r\n  values: {},\r\n  errors: {},\r\n  touched: {},\r\n});\r\n\r\ntype Validator = (value: any, args?: any) => string;\r\n\r\nexport const required: Validator = (value: any): string =>\r\n  value === undefined || value === null || value === ''\r\n    ? 'This must be populated'\r\n    : '';\r\n\r\nexport const minLength: Validator = (value: any, length: number): string =>\r\n  value && value.length < length\r\n    ? `This must be at least ${length} characters`\r\n    : '';\r\n\r\nexport const Form: FC<Props> = ({\r\n  submitCaption,\r\n  children,\r\n  validationRules,\r\n  onSubmit,\r\n  submitResult,\r\n  successMessage = 'Success!',\r\n  failureMessage = 'Something went wrong.',\r\n}) => {\r\n  const [values, setValues] = useState<Values>({});\r\n  const [errors, setErrors] = useState<Errors>({});\r\n  const [touched, setTouched] = useState<Touched>({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [submitError, setSubmitError] = useState(false);\r\n\r\n  const validate = (fieldName: string): string[] => {\r\n    if (!validationRules) {\r\n      return [];\r\n    }\r\n    if (!validationRules[fieldName]) {\r\n      return [];\r\n    }\r\n\r\n    const rules = Array.isArray(validationRules[fieldName])\r\n      ? (validationRules[fieldName] as Validation[])\r\n      : ([validationRules[fieldName]] as Validation[]);\r\n\r\n    const fieldErrors: string[] = [];\r\n    rules.forEach(rule => {\r\n      const error = rule.validator(values[fieldName], rule.arg);\r\n      if (error) {\r\n        fieldErrors.push(error);\r\n      }\r\n    });\r\n\r\n    const newErrors = { ...errors, [fieldName]: fieldErrors };\r\n    setErrors(newErrors);\r\n    return fieldErrors;\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n      setSubmitting(true);\r\n      setSubmitError(false);\r\n      const result = await onSubmit(values);\r\n\r\n      if (result === undefined) {\r\n        return;\r\n      }\r\n\r\n      setErrors(result.errors || {});\r\n      setSubmitError(!result.success);\r\n      setSubmitting(false);\r\n      setSubmitted(true);\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors: Errors = {};\r\n    let haveError: boolean = false;\r\n\r\n    if (validationRules) {\r\n      Object.keys(validationRules).forEach(fieldName => {\r\n        newErrors[fieldName] = validate(fieldName);\r\n        if (newErrors[fieldName].length > 0) {\r\n          haveError = true;\r\n        }\r\n      });\r\n    }\r\n    setErrors(newErrors);\r\n    return !haveError;\r\n  };\r\n\r\n  const disabled = submitResult\r\n    ? submitResult.success\r\n    : submitting || (submitted && !submitError);\r\n  const showError = submitResult\r\n    ? !submitResult.success\r\n    : submitted && submitError;\r\n  const showSuccess = submitResult\r\n    ? submitResult.success\r\n    : submitted && !submitError;\r\n\r\n  return (\r\n    <FormContext.Provider\r\n      value={{\r\n        values,\r\n        setValue: (fieldName: string, value: any) => {\r\n          setValues({ ...values, [fieldName]: value });\r\n        },\r\n        errors,\r\n        validate,\r\n        touched,\r\n        setTouched: (fieldName: string) => {\r\n          setTouched({ ...touched, [fieldName]: true });\r\n        },\r\n      }}\r\n    >\r\n      <form noValidate={true} onSubmit={handleSubmit}>\r\n        <fieldset\r\n          disabled={disabled}\r\n          css={css`\r\n            margin: 10px auto 0 auto;\r\n            padding: 30px;\r\n            width: 350px;\r\n            background-color: ${gray6};\r\n            border-radius: 4px;\r\n            border: 1px solid ${gray5};\r\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n          `}\r\n        >\r\n          {children}\r\n          <div\r\n            css={css`\r\n              margin: 30px 0px 0px 0px;\r\n              padding: 20px 0px 0px 0px;\r\n              border-top: 1px solid ${gray5};\r\n            `}\r\n          >\r\n            <PrimaryButton type=\"submit\">{submitCaption}</PrimaryButton>\r\n          </div>\r\n          {showError && (\r\n            <p\r\n              css={css`\r\n                color: red;\r\n              `}\r\n            >\r\n              {failureMessage}\r\n            </p>\r\n          )}\r\n          {showSuccess && (\r\n            <p\r\n              css={css`\r\n                color: green;\r\n              `}\r\n            >\r\n              {successMessage}\r\n            </p>\r\n          )}\r\n        </fieldset>\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n","export const server =\r\n  process.env.REACT_APP_ENV === 'production'\r\n    ? 'https://qanda-backend-toremove.azurewebsites.net'\r\n    : process.env.REACT_APP_ENV === 'staging'\r\n    ? 'https://qanda-staging-backend.azurewebsites.net'\r\n    : 'http://localhost:17525';\r\n\r\nexport const webAPIUrl = `${server}/api`;\r\n\r\nexport const authSettings = {\r\n  domain: 'dev-cpce2vd7.auth0.com',\r\n  client_id: 'kUEJ7wo7eEtJix54p12iyn5cCQg7XvTX',\r\n  redirect_uri: window.location.origin + '/signin-callback',\r\n  scope: 'openid profile QandAAPI email',\r\n  // scope: 'stirbuvitalie@yahoo.com',\r\n  audience: 'https://qanda',\r\n};\r\n","import {\r\n  QuestionData,\r\n  getUnansweredQuestions,\r\n  postQuestion,\r\n  PostQuestionData,\r\n} from './QuestionsData';\r\nimport {\r\n  Action,\r\n  ActionCreator,\r\n  Dispatch,\r\n  Reducer,\r\n  combineReducers,\r\n  Store,\r\n  createStore,\r\n  applyMiddleware,\r\n} from 'redux';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\n\r\ninterface QuestionsState {\r\n  readonly loading: boolean;\r\n  readonly unanswered: QuestionData[] | null;\r\n  readonly postedResult?: QuestionData;\r\n}\r\n\r\nexport interface AppState {\r\n  readonly questions: QuestionsState;\r\n}\r\n\r\nconst initialQuestionState: QuestionsState = {\r\n  loading: false,\r\n  unanswered: null,\r\n};\r\n\r\ninterface GettingUnasweredQuestionsAction\r\n  extends Action<'GettingUnasweredQuestionsAction'> {}\r\n\r\nexport interface GotUnansweredQuestionsAction\r\n  extends Action<'GotUnansweredQuestions'> {\r\n  questions: QuestionData[];\r\n}\r\n\r\nexport interface PostedQuestionAction extends Action<'PostedQuestion'> {\r\n  result: QuestionData | undefined;\r\n}\r\n\r\ntype QuestionsActions =\r\n  | GettingUnasweredQuestionsAction\r\n  | GotUnansweredQuestionsAction\r\n  | PostedQuestionAction;\r\n\r\nexport const getUnansweredQuestionsActionCreator: ActionCreator<ThunkAction<\r\n  Promise<void>,\r\n  QuestionData[],\r\n  null,\r\n  GotUnansweredQuestionsAction\r\n>> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    const gettingUnansweredQuestionsAction: GettingUnasweredQuestionsAction = {\r\n      type: 'GettingUnasweredQuestionsAction',\r\n    };\r\n\r\n    dispatch(gettingUnansweredQuestionsAction);\r\n    const questions = await getUnansweredQuestions();\r\n\r\n    const gotUnansweredQuestionAction: GotUnansweredQuestionsAction = {\r\n      questions,\r\n      type: 'GotUnansweredQuestions',\r\n    };\r\n    dispatch(gotUnansweredQuestionAction);\r\n\r\n    // TODO - get the questions from server\r\n    // TODO - dispatch the GotUnansweredQuestions action\r\n  };\r\n};\r\n\r\nexport const postQuestionActionCreator: ActionCreator<ThunkAction<\r\n  Promise<void>,\r\n  QuestionData,\r\n  PostQuestionData,\r\n  PostedQuestionAction\r\n>> = (question: PostQuestionData) => {\r\n  return async (dispatch: Dispatch) => {\r\n    const result = await postQuestion(question);\r\n    const postedQuestionAction: PostedQuestionAction = {\r\n      type: 'PostedQuestion',\r\n      result,\r\n    };\r\n    dispatch(postedQuestionAction);\r\n  };\r\n};\r\n\r\nexport const clearPostedQuestionActionCreator: ActionCreator<PostedQuestionAction> = () => {\r\n  const postedQuestionAction: PostedQuestionAction = {\r\n    type: 'PostedQuestion',\r\n    result: undefined,\r\n  };\r\n  return postedQuestionAction;\r\n};\r\n\r\nconst questionsReducer: Reducer<QuestionsState, QuestionsActions> = (\r\n  state = initialQuestionState,\r\n  action,\r\n) => {\r\n  switch (action.type) {\r\n    case 'GettingUnasweredQuestionsAction': {\r\n      return {\r\n        ...state,\r\n        unanswered: null,\r\n        loading: true,\r\n      };\r\n    }\r\n    case 'GotUnansweredQuestions': {\r\n      return {\r\n        ...state,\r\n        unanswered: action.questions,\r\n        loading: false,\r\n      };\r\n    }\r\n    case 'PostedQuestion': {\r\n      return {\r\n        ...state,\r\n        unanswered: action.result\r\n          ? (state.unanswered || []).concat(action.result)\r\n          : state.unanswered,\r\n        postedResult: action.result,\r\n      };\r\n    }\r\n    default:\r\n      neverReached(action);\r\n  }\r\n  return state;\r\n};\r\n\r\nconst neverReached = (never: never) => {};\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport function configureStore(): Store<AppState> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const gray1 = '#383737';\r\nexport const gray2 = '#5c5a5a';\r\nexport const gray3 = '#857c81';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\nexport const primary1 = '#681c41';\r\nexport const primary2 = '#824c67';\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#efd197';\r\nexport const fontFamily = \"'Segoe UI', 'Helvetica Neue',sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\nexport const PrimaryButton = styled.button`\r\n  background-color: ${primary2};\r\n  border-color: ${primary2};\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  color: white;\r\n  cursor: pointer;\r\n  :hover {\r\n    background-color: ${primary1};\r\n  }\r\n  :focus {\r\n    outline-color: ${primary2};\r\n  }\r\n  :disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const PageTitle = styled.h2`\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  margin: 10px 0px 5px;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport const StatusText = styled.div`\r\n  text-align: center;\r\n`;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC, useContext, ChangeEvent } from 'react';\r\nimport { FormContext } from './Form';\r\nimport { fontFamily, fontSize, gray5, gray2, gray6 } from './Styles';\r\n\r\ninterface Props {\r\n  name: string;\r\n  label?: string;\r\n  type?: 'Text' | 'TextArea' | 'Password';\r\n}\r\n\r\nconst baseCSS = css`\r\n  box-sizing: border-box;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  margin-bottom: 5px;\r\n  padding: 8px 10px;\r\n  border: 1px solid ${gray5};\r\n  border-radius: 3px;\r\n  color: ${gray2};\r\n  background-color: white;\r\n  width: 100%;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  :disabled {\r\n    background-color: ${gray6};\r\n  }\r\n`;\r\n\r\nexport const Field: FC<Props> = ({ name, label, type = 'Text' }) => {\r\n  const { setValue, touched, validate, setTouched } = useContext(FormContext);\r\n\r\n  const handleChange = (\r\n    e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>,\r\n  ) => {\r\n    if (setValue) {\r\n      setValue(name, e.currentTarget.value);\r\n    }\r\n\r\n    if (touched[name]) {\r\n      if (validate) {\r\n        validate(name);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (setTouched) {\r\n      setTouched(name);\r\n    }\r\n    if (validate) {\r\n      validate(name);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContext.Consumer>\r\n      {({ values, errors }) => (\r\n        <div\r\n          css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-bottom: 15px;\r\n          `}\r\n        >\r\n          {label && (\r\n            <label\r\n              css={css`\r\n                font-weight: bold;\r\n              `}\r\n              htmlFor={name}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          {(type === 'Text' || type === 'Password') && (\r\n            <input\r\n              type={type.toLowerCase()}\r\n              id={name}\r\n              css={baseCSS}\r\n              value={values[name] === undefined ? '' : values[name]}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n          )}\r\n          {type === 'TextArea' && (\r\n            <textarea\r\n              id={name}\r\n              css={css`\r\n                ${baseCSS};\r\n                height: 100px;\r\n              `}\r\n              value={values[name] === undefined ? '' : values[name]}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n            />\r\n          )}\r\n\r\n          {errors[name] &&\r\n            errors[name].length > 0 &&\r\n            errors[name].map(error => (\r\n              <div\r\n                css={css`\r\n                  font-size: 12px;\r\n                  color: red;\r\n                `}\r\n              >\r\n                {' '}\r\n                {error}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )}\r\n    </FormContext.Consumer>\r\n  );\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/user.e6aaf430.svg\";","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { QuestionData } from './QuestionsData';\r\nimport { gray2, gray3 } from './Styles';\r\ninterface Props {\r\n  data: QuestionData;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport const Question: FC<Props> = ({ data, showContent = true }) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 19px;\r\n      `}\r\n    >\r\n      <Link\r\n        css={css`\r\n          text-decoration: none;\r\n          color: ${gray2};\r\n        `}\r\n        to={`questions/${data.questionId}`}\r\n      >\r\n        {data.title}\r\n      </Link>\r\n    </div>\r\n    {showContent && (\r\n      <div\r\n        css={css`\r\n          padding-bottom: 10px;\r\n          font-size: 15px;\r\n          color: ${gray2};\r\n        `}\r\n      >\r\n        {data.content.length > 50\r\n          ? `${data.content.substring(0, 50)}...`\r\n          : data.content}\r\n      </div>\r\n    )}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Asked by ${\r\n        data.userName\r\n      } on ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC } from 'react';\r\nimport { gray5, accent2 } from './Styles';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Question } from './Question';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList: FC<Props> = ({ data, renderItem }) => {\r\n  return (\r\n    <ul\r\n      css={css`\r\n        list-style: none;\r\n        margin: 10px 0 0 0;\r\n        padding: 0px 20px;\r\n        background-color: #fff;\r\n        border-bottom-left-radius: 4px;\r\n        border-bottom-right-radius: 4px;\r\n        border-top: 3px solid ${accent2};\r\n        box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n      `}\r\n    >\r\n      {data.map(question => (\r\n        <li\r\n          key={question.questionId}\r\n          css={css`\r\n            border-top: 1px solid ${gray5};\r\n            :first-of-type {\r\n              border-top: none;\r\n            }\r\n          `}\r\n        >\r\n          {renderItem ? renderItem(question) : <Question data={question} />}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC, useState, useEffect } from 'react';\r\nimport { Page } from './Page';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { searchQuestions, QuestionData } from './QuestionsData';\r\n\r\nexport const SearchPage: FC<RouteComponentProps> = ({ location }) => {\r\n  const [questions, setQuestions] = useState<QuestionData[]>([]);\r\n\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const search = searchParams.get('criteria') || '';\r\n\r\n  useEffect(() => {\r\n    const doSearch = async (criteria: string) => {\r\n      const foundResults = await searchQuestions(criteria);\r\n      setQuestions(foundResults);\r\n    };\r\n\r\n    doSearch(search);\r\n  }, [search]);\r\n  return (\r\n    <Page title=\"Search Result\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions} />\r\n    </Page>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from './Auth';\r\n\r\ntype SigninAction = 'signin' | 'signin-callback';\r\ninterface Props {\r\n  action: SigninAction;\r\n}\r\n\r\nexport const SignInPage: FC<Props> = ({ action }) => {\r\n  const { signIn } = useAuth();\r\n\r\n  if (action === 'signin') {\r\n    signIn();\r\n  }\r\n\r\n  return (\r\n    <Page title=\"Sign In\">\r\n      <StatusText>Signing in ...</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\" />;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC } from 'react';\r\nimport { AnswerData } from './QuestionsData';\r\nimport { gray3 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData;\r\n}\r\n\r\nexport const Answer: FC<Props> = ({ data }) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 13px;\r\n      `}\r\n    >\r\n      {data.content}\r\n    </div>\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Answered by ${data.userName} on\r\n    ${data.created.toLocaleDateString()}\r\n    ${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC } from 'react';\r\nimport { AnswerData } from './QuestionsData';\r\nimport { Answer } from './Answer';\r\nimport { gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData[];\r\n}\r\n\r\nexport const AnswerList: FC<Props> = ({ data }) => {\r\n  return (\r\n    <ul\r\n      css={css`\r\n        list-style: none;\r\n        margin: 10px 0 0 0;\r\n        padding: 0;\r\n      `}\r\n    >\r\n      {data.map(answer => (\r\n        <li\r\n          css={css`\r\n            border-top: 1px solid ${gray5};\r\n          `}\r\n          key={answer.answerId}\r\n        >\r\n          <Answer data={answer} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray3, gray6 } from './Styles';\r\n\r\nimport { FC, useState, Fragment, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Page } from './Page';\r\nimport {\r\n  QuestionData,\r\n  getQuestion,\r\n  postAnswer,\r\n  mapQuestionFromServer,\r\n  QuestionDataFromServer,\r\n} from './QuestionsData';\r\nimport { AnswerList } from './AnswerList';\r\nimport { Form, required, minLength, Values } from './Form';\r\nimport { Field } from './Field';\r\nimport {\r\n  HubConnectionBuilder,\r\n  HubConnectionState,\r\n  HubConnection,\r\n} from '@aspnet/signalr';\r\nimport { useAuth } from './Auth';\r\n\r\ninterface RouteParams {\r\n  questionId: string;\r\n}\r\n\r\nexport const QuestionPage: FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n}) => {\r\n  const [question, setQuestion] = useState<QuestionData | null>(null);\r\n\r\n  const setUpSignalRConnection = async (questionId: number) => {\r\n    const connection = new HubConnectionBuilder()\r\n      .withUrl('https://localhost:5001/questionshub')\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    connection.on('Message', (message: string) => {\r\n      console.log(message);\r\n    });\r\n\r\n    connection.on('ReceiveQuestion', (question: QuestionDataFromServer) => {\r\n      console.log('ReceiveQuestion', question);\r\n      setQuestion(mapQuestionFromServer(question));\r\n    });\r\n\r\n    try {\r\n      await connection.start();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      connection.invoke('SubscribeQuestion', questionId).catch((err: Error) => {\r\n        return console.error(err.toString());\r\n      });\r\n    }\r\n\r\n    return connection;\r\n  };\r\n\r\n  const cleanUpSignalRConnection = async (\r\n    questionId: number,\r\n    connection: HubConnection,\r\n  ) => {\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      try {\r\n        await connection.invoke('UnsubscribeQuestion', questionId);\r\n      } catch (err) {\r\n        return console.error(err.toString());\r\n      }\r\n      connection.off('Message');\r\n      connection.off('ReceiveQuestion');\r\n      connection.stop();\r\n    } else {\r\n    }\r\n    connection.off('Message');\r\n    connection.off('ReceiveQuestion');\r\n    connection.stop();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      setQuestion(foundQuestion);\r\n    };\r\n\r\n    let connection: HubConnection;\r\n\r\n    if (match.params.questionId) {\r\n      const questionId = Number(match.params.questionId);\r\n      doGetQuestion(questionId);\r\n      setUpSignalRConnection(questionId).then(con => {\r\n        connection = con;\r\n      });\r\n    }\r\n\r\n    return function cleanUp() {\r\n      if (match.params.questionId) {\r\n        const questionId = Number(match.params.questionId);\r\n        cleanUpSignalRConnection(questionId, connection);\r\n      }\r\n    };\r\n  }, [match.params.questionId]);\r\n\r\n  const handleSubmit = async (values: Values) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: values.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n\r\n    return { success: result ? true : false };\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by ${question.userName} on\r\n${question.created.toLocaleDateString()}\r\n${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            {isAuthenticated && (\r\n              <div\r\n                css={css`\r\n                  margin-top: 20px;\r\n                `}\r\n              >\r\n                <Form\r\n                  submitCaption=\"Submit Your Answer\"\r\n                  validationRules={{\r\n                    content: [\r\n                      { validator: required },\r\n                      { validator: minLength, arg: 50 },\r\n                    ],\r\n                  }}\r\n                  onSubmit={handleSubmit}\r\n                  failureMessage=\"There was a problem with your answer\"\r\n                  successMessage=\"Your answer was successfully submitted\"\r\n                >\r\n                  <Field name=\"content\" label=\"Your Answer\" type=\"TextArea\" />\r\n                </Form>\r\n              </div>\r\n            )}\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from './Auth';\r\ntype SignoutAction = 'signout' | 'signout-callback';\r\n\r\ninterface Props {\r\n  action: SignoutAction;\r\n}\r\n\r\nexport const SignOutPage: FC<Props> = ({ action }) => {\r\n  let message = 'Signing out ...';\r\n  const { signOut } = useAuth();\r\n  switch (action) {\r\n    case 'signout':\r\n      signOut();\r\n      break;\r\n    case 'signout-callback':\r\n      message = 'You successfully signed out!';\r\n      break;\r\n  }\r\n  return (\r\n    <Page title=\"Sign out\">\r\n      <StatusText>{message}</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React, { FC, Fragment } from 'react';\r\nimport { Page } from './Page';\r\nimport { useAuth } from './Auth';\r\n\r\nexport const AuthorizedPage: FC = ({ children }) => {\r\n  const { isAuthenticated } = useAuth();\r\n  if (isAuthenticated) {\r\n    return <Fragment>{children}</Fragment>;\r\n  } else {\r\n    return <Page title=\"You do not have access to this page\" />;\r\n  }\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport user from './user.svg';\r\n\r\nexport const UserIcon = () => (\r\n  <img\r\n    src={user}\r\n    alt=\"User\"\r\n    css={css`\r\n      width: 12px;\r\n      opacity: 0.6;\r\n    `}\r\n  />\r\n);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { ChangeEvent, FC, useState, FormEvent } from 'react';\r\nimport { UserIcon } from './Icons';\r\nimport { fontFamily, fontSize, gray1, gray2, gray5 } from './Styles';\r\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { useAuth } from './Auth';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  background-color: transparent;\r\n  color: ${gray2};\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  span {\r\n    margin-left: 10px;\r\n  }\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n`;\r\n\r\nexport const Header: FC<RouteComponentProps> = ({ history, location }) => {\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const criteria = searchParams.get('criteria') || '';\r\n\r\n  const [search, setSearch] = useState(criteria);\r\n\r\n  const handleSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearch(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSearchSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    history.push(`/search?criteria=${search}`);\r\n  };\r\n\r\n  const { isAuthenticated, user, loading } = useAuth();\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        position: fixed;\r\n        box-sizing: border-box;\r\n        top: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px 20px;\r\n        background-color: #fff;\r\n        border-bottom: 1px solid ${gray5};\r\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n      `}\r\n    >\r\n      <div>\r\n        <Link\r\n          to=\"/\"\r\n          css={css`\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            color: ${gray1};\r\n            text-decoration: none;\r\n          `}\r\n        >\r\n          Q & A\r\n        </Link>\r\n        <span\r\n          css={css`\r\n            margin-left: 10px;\r\n            font-size: 16px;\r\n            color: ${gray2};\r\n          `}\r\n        >\r\n          {process.env.REACT_APP_ENV || 'development'}\r\n        </span>\r\n      </div>\r\n\r\n      <form onSubmit={handleSearchSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          onChange={handleSearchInputChange}\r\n          value={search}\r\n          css={css`\r\n            box-sizing: border-box;\r\n            font-family: ${fontFamily};\r\n            font-size: ${fontSize};\r\n            padding: 8px 10px;\r\n            border: 1px solid ${gray5};\r\n            border-radius: 3px;\r\n            color: ${gray2};\r\n            background-color: white;\r\n            width: 200px;\r\n            height: 30px;\r\n            :focus {\r\n              outline-color: ${gray5};\r\n            }\r\n          `}\r\n        />\r\n      </form>\r\n      {!loading &&\r\n        (isAuthenticated ? (\r\n          <div>\r\n            <span>{user!.name}</span>\r\n            <Link\r\n              to={{ pathname: '/signout', state: { local: true } }}\r\n              css={buttonStyle}\r\n            >\r\n              <UserIcon />\r\n              <span>Sign Out</span>\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <Link to=\"/signin\" css={buttonStyle}>\r\n            <UserIcon />\r\n            <span>Sign In</span>\r\n          </Link>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const HeaderWithRouter = withRouter(Header);\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { useEffect, FC } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AnyAction } from 'redux';\r\n\r\nimport { useAuth } from './Auth';\r\nimport { PrimaryButton, PageTitle } from './Styles';\r\nimport { QuestionList } from './QuestionList';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Page } from './Page';\r\n\r\nimport { getUnansweredQuestionsActionCreator, AppState } from './Store';\r\n\r\ninterface Props extends RouteComponentProps {\r\n  getUnansweredQuestions: () => Promise<void>;\r\n  questions: QuestionData[] | null;\r\n  questionsLoading: boolean;\r\n}\r\n\r\nconst HomePage: FC<Props> = ({\r\n  history,\r\n  questions,\r\n  questionsLoading,\r\n  getUnansweredQuestions,\r\n}) => {\r\n  useEffect(() => {\r\n    if (questions === null) {\r\n      getUnansweredQuestions();\r\n    }\r\n  }, [questions, getUnansweredQuestions]);\r\n\r\n  const handleAskQuestionClick = () => {\r\n    history.push('/ask');\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n        `}\r\n      >\r\n        <PageTitle>Unanswered Questions</PageTitle>\r\n        {isAuthenticated && (\r\n          <PrimaryButton onClick={handleAskQuestionClick}>\r\n            Ask a question\r\n          </PrimaryButton>\r\n        )}\r\n      </div>\r\n      {questionsLoading ? (\r\n        <div\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n          `}\r\n        >\r\n          Loading\r\n        </div>\r\n      ) : (\r\n        <QuestionList data={questions || []} />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n  return {\r\n    questions: store.questions.unanswered,\r\n    questionsLoading: store.questions.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\r\n  return {\r\n    getUnansweredQuestions: () =>\r\n      dispatch(getUnansweredQuestionsActionCreator()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './Store';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport { SearchPage } from './SearchPage';\nimport { SignInPage } from './SignInPage';\nimport { NotFoundPage } from './NotFoundPage';\nimport { QuestionPage } from './QuestionPage';\nimport { SignOutPage } from './SignOutPage';\nimport { AuthProvider } from './Auth';\nimport { AuthorizedPage } from './AuthorizedPage';\n\nimport { HeaderWithRouter as Header } from './Header';\nimport HomePage from './HomePage';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { fontFamily, fontSize, gray2 } from './Styles';\n\nconst AskPage = lazy(() => import('./AskPage'));\n\nconst store = configureStore();\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <AuthProvider>\n        <BrowserRouter>\n          <div\n            css={css`\n              font-family: ${fontFamily};\n              font-size: ${fontSize};\n              color: ${gray2};\n            `}\n          >\n            <Header />\n            <Switch>\n              <Redirect from=\"/home\" to=\"/\" />\n              <Route exact path=\"/\" component={HomePage} />\n              <Route path=\"/search\" component={SearchPage} />\n              <Route path=\"/ask\">\n                <Suspense\n                  fallback={\n                    <div\n                      css={css`\n                        margin-top: 100px;\n                        text-align: center;\n                      `}\n                    >\n                      Loading...\n                    </div>\n                  }\n                >\n                  <AuthorizedPage>\n                    <AskPage />\n                  </AuthorizedPage>\n                </Suspense>\n              </Route>\n              <Route\n                path=\"/signin\"\n                render={() => <SignInPage action=\"signin\" />}\n              />\n              <Route\n                path=\"/signin-callback\"\n                render={() => <SignInPage action=\"signin-callback\" />}\n              />\n              <Route\n                path=\"/signout\"\n                render={() => <SignOutPage action=\"signout\" />}\n              />\n              <Route\n                path=\"/signout-callback\"\n                render={() => <SignOutPage action=\"signout-callback\" />}\n              />\n              <Route path=\"/questions/:questionId\" component={QuestionPage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AuthProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}